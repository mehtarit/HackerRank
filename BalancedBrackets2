using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the isBalanced function below.
    static string isBalanced(string s) {
        var bracketStack = new Stack<char>();
        foreach(var c in s){
            if(c == '{' || c== '[' || c== '(')
            {
                bracketStack.Push(c);
            }
            else if(c == '}'){
                if(bracketStack.Count == 0 || bracketStack.Peek() != '{'){
                    return "NO";
                }
                else bracketStack.Pop();

            }
            else if(c == ')'){
                if(bracketStack.Count == 0 || bracketStack.Peek() != '('){
                    return "NO";
                }
                else bracketStack.Pop();
            }  
            else if(c == ']'){
                if(bracketStack.Count == 0 || bracketStack.Peek() != '['){
                    return "NO";
                }
                else bracketStack.Pop();
            }
        }

        Console.WriteLine("Bracket stack count at end is: "+ bracketStack.Count);
        if(bracketStack.Count == 0){
            return "YES";
        }
        else return "NO";
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int t = Convert.ToInt32(Console.ReadLine());

        for (int tItr = 0; tItr < t; tItr++) {
            string s = Console.ReadLine();

            string result = isBalanced(s);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
