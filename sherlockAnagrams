using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    static string SortString(string input)
    {
        char[] charArray = input.ToArray();
        Array.Sort(charArray);
        return new string(charArray);
    }

    // Complete the sherlockAndAnagrams function below.
    static int sherlockAndAnagrams(string s) 
    {
        int pairsCount = 0;
        int slidingWindow = 1;

        Dictionary<string, int> countTracker = new Dictionary<string, int>();

        while(slidingWindow < s.Length)
        {
            for(int i= 0; i <= s.Length-slidingWindow; i=i+1)
            {
                string current = s.Substring(i, slidingWindow);
                string sorted = SortString(current);

                if(!countTracker.ContainsKey(sorted))
                {
                    countTracker.Add(sorted, 1);
                    continue;
                }

                pairsCount = pairsCount + countTracker[sorted];
                countTracker[sorted] = countTracker[sorted] + 1;
            }
            slidingWindow++;
        }
        return pairsCount;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int q = Convert.ToInt32(Console.ReadLine());

        for (int qItr = 0; qItr < q; qItr++) {
            string s = Console.ReadLine();

            int result = sherlockAndAnagrams(s);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
