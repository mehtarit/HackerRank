using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {
    static string s;
    static HashSet<string> subStringMap = new HashSet<string>();

    static bool IsRepeating(string sub)
    {
        char toCompare = sub[0];
        foreach(char c in sub)
        {
            if(c != toCompare)
            {
                return false;
            }
        }
        return true;
    }

    static string GetHash(int start, int end)
    {
        return start.ToString() + "-" + end.ToString();
    }

    static long substrCounter(int start, int end)
    {
        long count = 0;
        int strLength = end - start + 1;
        if(strLength == 1)
        {
            string subStr = s.Substring(start, strLength);
            Console.WriteLine("Length is 1 for string: " + subStr);
            string hash = GetHash(start, end);
            if(!subStringMap.Contains(hash))
            {
                subStringMap.Add(hash);
                count = count +1;
            }
        }
        else if(strLength %2 == 0) //if even length
        {            
            string subStr = s.Substring(start, strLength);
            Console.WriteLine("Length is even for string: " + subStr);
            if(IsRepeating(subStr))
            {
                string hash = GetHash(start, end);
                if(!subStringMap.Contains(hash))
                {
                    subStringMap.Add(hash);
                    count = count + ((long)strLength*((long)strLength+1))/2; 
                }
                
            }
            else
            {
                int newStrLength = strLength -1;
                if(strLength != 0)
                {
                    int newEnd = start + newStrLength -1;
                    int newStart = end - newStrLength +1;

                    count = count + substrCounter(start, newEnd);
                    count = count + substrCounter(newStart, end);
                }
            }
        }
        else
        {
            int mid = strLength/2;
            string subStr = s.Substring(start, strLength);
            Console.WriteLine("Length is odd for string: " + subStr);
            char toCompare = subStr[0];
            bool repeats = true;

            for(int i = 0; i < mid; i++)
            {
                if(subStr[i] != toCompare)
                {
                    repeats = false;
                    break;
                }
            }

            for(int i = mid+1; i < strLength; i++)
            {
                if(subStr[i] != toCompare)
                {
                    repeats = false;
                    break;
                }
            }

            if(repeats == true)
            {
                if(subStr[mid] == toCompare)
                {
                    string hash = GetHash(start, end);
                    if(!subStringMap.Contains(hash))
                    {
                        subStringMap.Add(hash);
                        count = count + ((strLength)*(strLength+1))/2;
                    }
                }
                else
                {
                    string hash = GetHash(start, end);
                    if(!subStringMap.Contains(hash))
                    {
                        subStringMap.Add(hash);
                        count = count +1;
                    }

                    int newStrLength = strLength -1;
                    if(strLength != 0)
                    {
                        int newEnd = start + newStrLength -1;
                        int newStart = end - newStrLength +1;

                        count = count + substrCounter(start, newEnd);
                        count = count + substrCounter(newStart, end);
                    }
                }
            }
            else 
            {
                int newStrLength = strLength -1;
                if(strLength != 0)
                {
                    int newEnd = start + newStrLength -1;
                    int newStart = end - newStrLength +1;

                    count = count + substrCounter(start, newEnd);
                    count = count + substrCounter(newStart, end);
                }
            }
            
        }

        return count; 
    }
    // Complete the substrCount function below.
    static long substrCount(int n) {
        long count = substrCounter(0, n-1);
        return count;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        s = Console.ReadLine();

        long result = substrCount(n);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
