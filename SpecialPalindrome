using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    static bool IsRepeating(string s)
    {
        char toCompare = s[0];
        foreach(char c in s)
        {
            if (c != toCompare)
            {
                return false;
            }
        }

        return true;
    }

    static bool IsPalindrome(string s)
    {
        int mid = s.Length/2;
        string firstHalf = s.Substring(0, mid - 0);
        string secondHalf = s.Substring(mid+1, s.Length - (mid + 1));
      //  Console.WriteLine("s is: " + s);
       // Console.WriteLine("firstHalf is: " + firstHalf);
        //Console.WriteLine("secondHalf is: " + secondHalf);
        if(IsRepeating(firstHalf) && IsRepeating(secondHalf))
        {
            if(firstHalf == secondHalf)
            {
                return true;
            }
        }
        return false;
    }

    static bool IsRepeatingPalindrome(string s)
    {
        int mid = s.Length/2;
        char toCompare = s[0];
        if(s[mid] == s[0])
        {
            return true;
        }
        return false;
    }

    static long GetPalindromeCount(string s, ref bool repeats)
    {
        repeats = false;
        if(s.Length == 1)
        {
           // Console.WriteLine(s + " is a palindrome and count is " + 1);
            return 1;
        }

        if(s.Length %2 == 0)
        {
            if(IsRepeating(s))
            {
                repeats = true;
            //    Console.WriteLine(s + " is a palindrome and count is " + (s.Length*(s.Length + 1))/2);
                return (s.Length*(s.Length + 1))/2;
            }
            return 0;            
        }

        if(IsPalindrome(s))
        {
            if(IsRepeatingPalindrome(s))
            {
                repeats = true;
          //      Console.WriteLine(s + " is a palindrome and count is " + (s.Length*(s.Length + 1))/2);
                return (s.Length*(s.Length + 1))/2;
            }
        //    Console.WriteLine(s + " is a palindrome and count is " + 1);
            return 1;
        }
        return 0;
    }
    // Complete the substrCount function below.
    static long substrCount(int n, string s) {

        long count = 0;
        bool IsFirst = false;

        for(int i = 0; i < n; i++)
        {
            int last = n-1;
            while(last >=i)
            {
                bool repeats = false;
                int subStrLength = last - i +1;
                string current = s.Substring(i, subStrLength);
                count = count + GetPalindromeCount(current, ref repeats);
                if(repeats)
                {
                    if(i == 0)
                    {
                        IsFirst = true;
                    }
                    break;
                }
                last--;
            }
            if(IsFirst) 
            {
                break;
            }
        }

        return count;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        string s = Console.ReadLine();

        long result = substrCount(n, s);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
