using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    static float getMedian(int[] freq, int d)
    {
        int middle =0;
        if(d%2 == 1)
        {
            for(int i = 0; i<freq.Length; i++)
            {
                middle = middle + freq[i];
                if(middle > (d/2))
                {
                    middle = i;
                    break;
                }
            }
            return middle;
        }

        int first = -1;
        int second = -1;
        float answer = 0;

        for(int i = 0; i< freq.Length; i++)
        {
            middle = middle + freq[i];
            if(middle == d/2)
            {
                first = i;
            }
            if(middle > (d/2))
            {
                second = i;
                if(first < 0)
                {
                    first = i;
                }

                answer = ((float)first+(float)second)/2;
                break;
            }
        }
        return answer;
    }

    // Complete the activityNotifications function below.
    static int activityNotifications(int[] expenditure, int d) 
    {   
        int notificationCount = 0;
        Queue<int> q = new Queue<int>();
        int[]freq = new int[201];

        for(int i=0; i<expenditure.Length; i++)
        {
            while(i < d)
            {
                q.Enqueue(expenditure[i]);
                freq[expenditure[i]]++;
                i++;
            }

            float median = getMedian(freq, d);
            
            q.Enqueue(expenditure[i]);
            freq[expenditure[i]]++;
            if((float)expenditure[i] >= (2*median))
            {
                notificationCount++;
            }

            int last = q.Dequeue();
            freq[last]--;
    }
    return notificationCount;

    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nd = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nd[0]);

        int d = Convert.ToInt32(nd[1]);

        int[] expenditure = Array.ConvertAll(Console.ReadLine().Split(' '), expenditureTemp => Convert.ToInt32(expenditureTemp))
        ;
        int result = activityNotifications(expenditure, d);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
