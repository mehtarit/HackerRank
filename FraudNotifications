using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    static double calculateMedian(Queue<int> trailingQueue, int[] countArr)
    {
        int[] countPositionArr = new int[201];
        //needed since arrays are reference types in c#

        int sum = 0;
        double median = 0;
        int d = trailingQueue.Count;
        List<int> trailingList = new List<int>();
        trailingList = trailingQueue.ToList();

        int[] output = new int[d];

        for(int i = 0; i<201; i++)
        {
            sum = sum + countArr[i];
            countPositionArr[i] = sum;
        }

        for(int i = d-1; i>=0; i--)
        {
            output[countPositionArr[trailingList[i]]-1] = trailingList[i];
            countPositionArr[trailingList[i]]--;
        }

        if(d%2 != 0)
        {
            median = (double)output[d/2];
            return median;
        }
        else {
            int first = d/2;
            int second = first-1;
            median = (double)(output[first] + output[second])/2;
        }
        return median;
    }

    // Complete the activityNotifications function below.
    static int activityNotifications(int[] expenditure, int d) 
    {
        int notifications = 0;
        Queue<int> trailingQueue = new Queue<int>();

        for(int i = 0; i < d; i++)
        {
            trailingQueue.Enqueue(expenditure[i]);
        }

        int[] countArr = new int[201];
        for(int i = 0; i < d; i++)
        {
            countArr[expenditure[i]]++;
        }

        for(int i = d; i < expenditure.Length; i++)
        {            
            double median = calculateMedian(trailingQueue, countArr);
            if((double)expenditure[i] >= (2*median))
            {
                notifications++;
            }
            countArr[trailingQueue.Peek()]--;
            trailingQueue.Dequeue();
            trailingQueue.Enqueue(expenditure[i]);
            countArr[expenditure[i]]++;
        }
        return notifications;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nd = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nd[0]);

        int d = Convert.ToInt32(nd[1]);

        int[] expenditure = Array.ConvertAll(Console.ReadLine().Split(' '), expenditureTemp => Convert.ToInt32(expenditureTemp))
        ;
        int result = activityNotifications(expenditure, d);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
